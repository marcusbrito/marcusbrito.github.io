= Processamento Digital de Imagem
Marcus Brito <mvobrito@gmail.com>
:toc: left
:numbered:
:source-highlighter: pygments

== Sobre

Esse espaço tem como objetivo expor os projetos e exercícios da matéria de Processamento Digital de Imagem

== Primeira Unidade
=== Negativo
==== Objetivo

A ideia do programa é receber do usuário as coordenadas de dois pontos e, em seguida, exibir a imagem(que foi inicializada junto com o programa), invertendo a cor dos pixels da região limitada pelos pontos.

==== Código

[source,cpp]
.regions.cpp
----
include::regions.cpp[]
----

==== Análise

* O programa inicia lendo a imagem:

.biel.png
image::biel.png[]

* Em seguida, recebe os pontos do usuário, e verifica se eles estão dentro dos limites da imagem:

----
if(p1[0]<0 || p1[1]<0 || p2[0]<0 || p2[1]<0 || p1[0]> image.size().height || p1[1]> image.size().width || p2[0]> image.size().height || p2[1]> image.size().width){
      flag = 1;
      cout << "Coodenadas invalidas. Digite novamente:" << endl;
    }
----

* Então, um loop(for) percorre a região limitada pelos pontos invertendo o valor dos pixels a partir da operação "Cor negativa = 255 - Cor original":

----
for(int i= p1[0];i<=p2[0];i++){
    for(int j=p1[1];j<=p2[1];j++){
      image.at<uchar>(i,j) = 255 - image.at<uchar>(i,j);
    }
  }
----

* Por fim, exibe a imagem com o efeito aplicado:

.invertida.png
image::invertida.png[]

=== Troca de Regões
==== Objetivo

O objetivo do programa é trocar as posições dos "quadrantes" da imagem.

==== Código

[source,cpp]
.trocaregioes.cpp
----
include::trocaregioes.cpp[]
----

==== Análise

* Nesse caso, a imagem já é passado como parâmetro ao executarmos o programa no terminal:

.biel.png
image::biel.png[]

* Em seguida, uma segunda imagem "trocada" é criada, com o mesmo tamanho da imagem original:

----
Mat trocada(height, width, image.type());
----

* Então, "trocada" é preenchida com os quadrantes da imagem original, só que com suas posições invertidas. Esse processo é feito utilizando dois métodos da biblioteca OpenCV: 
	Rect - Cria uma seleção retângular a partir das coordenadas e dimenssões passadas como parâmetro.
	copyTo - Copia o conteudo da primeira imagem par a segunda(Imagem1.copyTo(Imagem2)).

----
  image(Rect(0, 0, width/2, height/2)).copyTo(trocada(Rect(width/2, height/2, width/2, height/2)));
  
  image(Rect(0, height/2, width/2, height/2)).copyTo(trocada(Rect(width/2,0, width/2, height/2)));

  image(Rect(width/2,0,width/2,height/2)).copyTo(trocada(Rect(0,height/2, width/2, height/2)));

  image(Rect(width/2,height/2,width/2,height/2)).copyTo(trocada(Rect(0,0, width/2, height/2)));
----

* Por fim, exibe a imagem com o efeito aplicado:

.trocada.png
image::trocada.png[]


